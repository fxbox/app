{"version":3,"sources":["js/polyfills/fetch.js"],"names":["self","normalizeName","name","String","test","TypeError","toLowerCase","normalizeValue","value","iteratorFor","items","iterator","next","shift","done","undefined","support","iterable","Symbol","Headers","headers","this","map","forEach","append","Object","getOwnPropertyNames","consumed","body","bodyUsed","Promise","reject","fileReaderReady","reader","resolve","onload","result","onerror","error","readBlobAsArrayBuffer","blob","FileReader","readAsArrayBuffer","readBlobAsText","readAsText","Body","_initBody","_bodyInit","_bodyText","Blob","prototype","isPrototypeOf","_bodyBlob","formData","FormData","_bodyFormData","searchParams","URLSearchParams","toString","arrayBuffer","ArrayBuffer","Error","get","set","type","rejected","then","text","decode","json","JSON","parse","normalizeMethod","method","upcased","toUpperCase","methods","indexOf","Request","input","options","url","credentials","mode","referrer","form","trim","split","bytes","replace","join","decodeURIComponent","xhr","head","pairs","getAllResponseHeaders","header","key","Response","bodyInit","status","ok","statusText","fetch","e","list","push","values","getAll","has","hasOwnProperty","callback","thisArg","call","keys","entries","clone","response","redirectStatuses","redirect","RangeError","location","init","responseURL","getResponseHeader","request","XMLHttpRequest","responseText","ontimeout","open","withCredentials","responseType","setRequestHeader","send","polyfill"],"mappings":"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","file":"js/polyfills/fetch.js","sourcesContent":["(function(self) {\n  'use strict';\n\n  if (self.fetch) {\n    return\n  }\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob: 'FileReader' in self && 'Blob' in self && (function() {\n      try {\n        new Blob()\n        return true\n      } catch(e) {\n        return false\n      }\n    })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name)\n    }\n    if (/[^a-z0-9\\-#$%&'*+.\\^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value)\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift()\n        return {done: value === undefined, value: value}\n      }\n    }\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      }\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {}\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value)\n      }, this)\n\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name])\n      }, this)\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name)\n    value = normalizeValue(value)\n    var list = this.map[name]\n    if (!list) {\n      list = []\n      this.map[name] = list\n    }\n    list.push(value)\n  }\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)]\n  }\n\n  Headers.prototype.get = function(name) {\n    var values = this.map[normalizeName(name)]\n    return values ? values[0] : null\n  }\n\n  Headers.prototype.getAll = function(name) {\n    return this.map[normalizeName(name)] || []\n  }\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  }\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = [normalizeValue(value)]\n  }\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    Object.getOwnPropertyNames(this.map).forEach(function(name) {\n      this.map[name].forEach(function(value) {\n        callback.call(thisArg, value, name, this)\n      }, this)\n    }, this)\n  }\n\n  Headers.prototype.keys = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push(name) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.values = function() {\n    var items = []\n    this.forEach(function(value) { items.push(value) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.entries = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push([name, value]) })\n    return iteratorFor(items)\n  }\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result)\n      }\n      reader.onerror = function() {\n        reject(reader.error)\n      }\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader()\n    reader.readAsArrayBuffer(blob)\n    return fileReaderReady(reader)\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader()\n    reader.readAsText(blob)\n    return fileReaderReady(reader)\n  }\n\n  function Body() {\n    this.bodyUsed = false\n\n    this._initBody = function(body) {\n      this._bodyInit = body\n      if (typeof body === 'string') {\n        this._bodyText = body\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString()\n      } else if (!body) {\n        this._bodyText = ''\n      } else if (support.arrayBuffer && ArrayBuffer.prototype.isPrototypeOf(body)) {\n        // Only support ArrayBuffers for POST method.\n        // Receiving ArrayBuffers happens via Blobs, instead.\n      } else {\n        throw new Error('unsupported BodyInit type')\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8')\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type)\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')\n        }\n      }\n    }\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this)\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      }\n\n      this.arrayBuffer = function() {\n        return this.blob().then(readBlobAsArrayBuffer)\n      }\n\n      this.text = function() {\n        var rejected = consumed(this)\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return readBlobAsText(this._bodyBlob)\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as text')\n        } else {\n          return Promise.resolve(this._bodyText)\n        }\n      }\n    } else {\n      this.text = function() {\n        var rejected = consumed(this)\n        return rejected ? rejected : Promise.resolve(this._bodyText)\n      }\n    }\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      }\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    }\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase()\n    return (methods.indexOf(upcased) > -1) ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {}\n    var body = options.body\n    if (Request.prototype.isPrototypeOf(input)) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url\n      this.credentials = input.credentials\n      if (!options.headers) {\n        this.headers = new Headers(input.headers)\n      }\n      this.method = input.method\n      this.mode = input.mode\n      if (!body) {\n        body = input._bodyInit\n        input.bodyUsed = true\n      }\n    } else {\n      this.url = input\n    }\n\n    this.credentials = options.credentials || this.credentials || 'omit'\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers)\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET')\n    this.mode = options.mode || this.mode || null\n    this.referrer = null\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body)\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this)\n  }\n\n  function decode(body) {\n    var form = new FormData()\n    body.trim().split('&').forEach(function(bytes) {\n      if (bytes) {\n        var split = bytes.split('=')\n        var name = split.shift().replace(/\\+/g, ' ')\n        var value = split.join('=').replace(/\\+/g, ' ')\n        form.append(decodeURIComponent(name), decodeURIComponent(value))\n      }\n    })\n    return form\n  }\n\n  function headers(xhr) {\n    var head = new Headers()\n    var pairs = (xhr.getAllResponseHeaders() || '').trim().split('\\n')\n    pairs.forEach(function(header) {\n      var split = header.trim().split(':')\n      var key = split.shift().trim()\n      var value = split.join(':').trim()\n      head.append(key, value)\n    })\n    return head\n  }\n\n  Body.call(Request.prototype)\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {}\n    }\n\n    this.type = 'default'\n    this.status = options.status\n    this.ok = this.status >= 200 && this.status < 300\n    this.statusText = options.statusText\n    this.headers = options.headers instanceof Headers ? options.headers : new Headers(options.headers)\n    this.url = options.url || ''\n    this._initBody(bodyInit)\n  }\n\n  Body.call(Response.prototype)\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  }\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''})\n    response.type = 'error'\n    return response\n  }\n\n  var redirectStatuses = [301, 302, 303, 307, 308]\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  }\n\n  self.Headers = Headers\n  self.Request = Request\n  self.Response = Response\n\n  self.fetch = function(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request\n      if (Request.prototype.isPrototypeOf(input) && !init) {\n        request = input\n      } else {\n        request = new Request(input, init)\n      }\n\n      var xhr = new XMLHttpRequest()\n\n      function responseURL() {\n        if ('responseURL' in xhr) {\n          return xhr.responseURL\n        }\n\n        // Avoid security warnings on getResponseHeader when not allowed by CORS\n        if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n          return xhr.getResponseHeader('X-Request-URL')\n        }\n\n        return\n      }\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: headers(xhr),\n          url: responseURL()\n        }\n        var body = 'response' in xhr ? xhr.response : xhr.responseText\n        resolve(new Response(body, options))\n      }\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.open(request.method, request.url, true)\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob'\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value)\n      })\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)\n    })\n  }\n  self.fetch.polyfill = true\n})(typeof self !== 'undefined' ? self : this);\n"],"sourceRoot":"/source/"}